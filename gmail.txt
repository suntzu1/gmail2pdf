const fs = require('fs');
const path = require('path');
const base64topdf = require('base64topdf');
const readline = require('readline');
const {google} = require('googleapis');
const pdfkit = require('pdfkit');

// If modifying these scopes, delete your previously saved credentials
// at TOKEN_DIR/gmail-nodejs.json
const SCOPES = ['https://www.googleapis.com/auth/gmail.readonly'];

// Change token directory to your system preference
// var TOKEN_DIR = ('C:/Work/NodeJsGapi/credentials/');
// var TOKEN_PATH = TOKEN_DIR + 'gmail-nodejs.json';
const TOKEN_PATH = path.resolve('credentials', 'gmail-nodejs.json');

var gmail = google.gmail('v1');

// Load client secrets from a local file.
fs.readFile('client_secret.json', function processClientSecrets(err, content) {
  if (err) {
    console.log('Error loading client secret file: ' + err);
    return;
  }
  // Authorize a client with the loaded credentials, then call the
  // Gmail API.
  // authorize(JSON.parse(content), listLabels);


  // Authorize a client with the loaded credentials, then call the
  // Gmail API.
  authorize(JSON.parse(content), getRecentEmail);
});

/**
 * Create an OAuth2 client with the given credentials, and then execute the
 * given callback function.
 *
 * @param {Object} credentials The authorization client credentials.
 * @param {function} callback The callback to call with the authorized client.
 */
function authorize(credentials, callback) {
  var clientSecret = credentials.installed.client_secret;
  var clientId = credentials.installed.client_id;
  var redirectUrl = credentials.installed.redirect_uris[0];

  var OAuth2 = google.auth.OAuth2;

  var oauth2Client = new OAuth2(clientId, clientSecret, redirectUrl);

  // Check if we have previously stored a token.
  fs.readFile(path.resolve(TOKEN_PATH), function (err, token) {
    if (err) {
      getNewToken(oauth2Client, callback);
    } else {
      oauth2Client.credentials = JSON.parse(token);
      callback(oauth2Client);
    }
  });
}

/**
 * Get and store new token after prompting for user authorization, and then
 * execute the given callback with the authorized OAuth2 client.
 *
 * @param {google.auth.OAuth2} oauth2Client The OAuth2 client to get token for.
 * @param {getEventsCallback} callback The callback to call with the authorized
 *     client.
 */
function getNewToken(oauth2Client, callback) {
  var authUrl = oauth2Client.generateAuthUrl({ access_type: 'offline', scope: SCOPES });
  console.log('Authorize this app by visiting this url: ', authUrl);
  var rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
  });

  rl.question('Enter the code from that page here: ', function (code) {
    rl.close();
    oauth2Client.getToken(code, function (err, token) {
      if (err) {
        console.log('Error while trying to retrieve access token', err);
        return;
      }
      oauth2Client.credentials = token;
      storeToken(token);
      callback(oauth2Client);
    });
  });
}

/**
 * Store token to disk be used in later program executions.
 *
 * @param {Object} token The token to store to disk.
 */
function storeToken(token) {
  try {
    fs.mkdirSync(TOKEN_DIR);
  } catch (err) {
    if (err.code != 'EEXIST') {
      throw err;
    }
  }
  fs.writeFile(TOKEN_PATH, JSON.stringify(token));
  console.log('Token stored to ' + TOKEN_PATH);
}

/**
 * Lists the labels in the user's account.
 *
 * @param {google.auth.OAuth2} auth An authorized OAuth2 client.
 */
function listLabels(auth) {
  gmail.users.labels.list({ auth: auth, userId: 'me', }, function (err, response) {
    if (err) {
      console.log('The API returned an error: ' + err);
      return;
    }

    var labels = response.data.labels;

    if (labels.length == 0) {
      console.log('No labels found.');
    } else {
      console.log('Labels:');
      for (var i = 0; i < labels.length; i++) {
        var label = labels[i];
        console.log('%s', label.name);
      }
    }
  });
}

/**
 * Get the recent email from your Gmail account
 *
 * @param {google.auth.OAuth2} auth An authorized OAuth2 client.
 */

var gAuth;
function getRecentEmail(auth) {
  gAuth = auth;
  // Only get the recent email - 'maxResults' parameter
  gmail.users.messages.list({ auth: auth, userId: 'me', maxResults: 10, }, function (err, response) {
    if (err) {
      console.log('The API returned an error: ' + err);
      return;
    }
    for (i = 0; i < response.data.messages.length; ++i) {
      // Get the message id which we will need to retreive tha actual message next.
      var message_id = response['data']['messages'][i]['id'];
      console.log(message_id);
      ReadEmailTextAndAttachment(auth, message_id, false);
    }
  });
}

function ReadEmailTextAndAttachment(auth, message_id, markread) {
  // Retreive the actual message using the message id
  gmail.users.messages.get({ auth: auth, userId: 'me', id: message_id },
    function (err, response) {
      if (err) {
        console.log('The API returned an error: ' + err);
        return;
      }
      console.log(response['data']);
      var message_raw = ''
      for (i = 0; i < response.data.payload.parts.length; ++i) {
        var part = response.data.payload.parts[i];
        var isAttch = part.body.attachmentId != null;
        if (!isAttch) {
          message_raw += part.body.data;
        }
        else {
          // handle attachment
          gmail.users.messages.attachments.get({ auth: this.gauth, userId: 'me', messageId: this.gmid, id: part.body.attachmentId },
            function (err, response) {
              base64topdf.base64Decode(response.data.data, this.aMsgId + '_' + this.aFilename);
            }.bind({ aFilename: part.filename, aMsgId: this.gmid }));
        }
      }
      debugger;
      if (message_raw) {
        // base64topdf.base64Decode(message_raw, this.gmid + '.pdf');

        // Access the email body content, like this...
        data = message_raw;
        buff = new Buffer(data, 'base64');
        text = buff.toString();
        doc = new pdfkit;
        doc.pipe(fs.createWriteStream(this.gmid + '.pdf'));
        doc.text(text);
        doc.end();
        // Utilities.newBlob(text, 'text/html', this.gmid + '.pdf');
        // base64topdf.base64Decode(base64topdf.strToBase64(text), this.gmid + '.pdf');
        console.log(text);
        if (markread) {
          // UNREAD
          MarkEmailAsRead(auth, message_id);
        }
      }
    }.bind({ gauth: auth, gmid: message_id }));
}

function MarkEmailAsRead(auth, message_id) {
  gmail.users.messages.modify({ auth: auth, userId: 'me', id: message_id, labelsToRemove: 'UNREAD' },
    function (err, response) {
      if (err) {
        console.log('The API returned an error: ' + err);
        return;
      }
    });
}